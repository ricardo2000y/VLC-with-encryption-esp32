/**
 * @file duffing_msws32.h
 * @brief Header containing the functions, data structures and constants needed for "duffing_msws32.c".
 * @details Header containing the functions, data structures and constants needed for "duffing_msws32.c", including commentaries.
 * @version 0.1
 * @date 2024-07-04
 * 
 * @copyright Copyright (c) 2024
 */

#ifndef DUFFING_MSWS32_H
#define DUFFING_MSWS32_H

#include <stdint.h>
#include <string.h>
#include "esp_system.h"
#include "config.h"



/** @struct msws32_var_t
 *  @brief Structure to store the variables for the MSWS32 generator.
 *  @details Structure defined to store the variables for the MSWS32 generator, namely x, w and s.
 * 
 *  @var msws32_var_t::x
 *  @brief Member 'x' is an unsigned 64-bit integer used in the MSWS32 generator.
 *  @details An unsigned 64-bit (uint64_t) representing the 'x' value used in the MSWS32 generator.
 * 
 *  @var msws32_var_t::w
 *  @brief Member 'w' is an unsigned 64-bit integer used in the MSWS32 generator.
 *  @details An unsigned 64-bit (uint64_t) representing the 'w' value used in the MSWS32 generator.weyl_sequence
 * 
 *  @var msws32_var_t::s
 *  @brief Member 's' is an unsigned 64-bit integer used in the MSWS32 generator.
 *  @details An unsigned 64-bit (uint64_t) representing the 's' value used in the MSWS32 generator. stream_seed
 * 
 */
typedef struct msws32_var_t {
    uint64_t x; 
    uint64_t w; 
    uint64_t s; 
} msws32_var_t;

/** @struct duffing_var_t
 *  @brief Structure to store the variables for the Duffing map.
 *  @details Structure defined to store the variables for the Duffing map, namely x and y.
 * 
 *  @var duffing_var_t::x
 *  @brief Member 'x' is a double precision floating-point number used in the Duffing map.
 *  @details A double precision floating-point (double) number representing the 'x' value used in the Duffing map.
 *  @var duffing_var_t::y
 *  @brief Member 'y' is a double precision floating-point number used in the Duffing map.
 *  @details A double precision floating-point (double) number representing the 'y' value used in the Duffing map.
 */
typedef struct duffing_var_t {
    double x;
    double y;
} duffing_var_t;

/**
 * @struct encryption_vars_t
 * @brief Structure to hold variables for encryption process.
 *
 * This structure contains the variables required for the encryption process,
 * including two Duffing maps and an MSWS32 input.
 *
 * @var encryption_vars_t::duffing_map_1
 * First Duffing map variable.
 *
 * @var encryption_vars_t::iterations_map1
 * Number of iterations for the first Duffing map.
 *
 * @var encryption_vars_t::duffing_map_2
 * Second Duffing map variable.
 *
 * @var encryption_vars_t::iterations_map2
 * Number of iterations for the second Duffing map.
 *
 * @var encryption_vars_t::msws32_input
 * MSWS32 input variable.
 */
typedef struct encryption_vars_t{
    duffing_var_t duffing_map_1;
    const int iterations_map1;
    duffing_var_t duffing_map_2;
    const int iterations_map2;
    msws32_var_t msws32_input;
} encryption_vars_t;


/**
 * @brief Copies the bitwise representation of a double into a uint64_t.
 * 
 * @param result The uint64_t to output.
 * @param d The double value to copy.
 * 
 */
inline __attribute__((always_inline))IRAM_ATTR void doubleToUint64Bits(uint64_t* result, double d);


/**
 * @brief Implements the Duffing map equation.
 * Implements the Duffing map, following the literature defined equation, performing one iteration per call.
 * 
 * @param duffing_map_variables Pointer to the duffing_var_t structure containing the variables for the Duffing map.
 */
inline __attribute__((always_inline)) void IRAM_ATTR duffing_map(duffing_var_t* duffing_map_variables);

/**
 * @brief Implements the MSWS32 generator.
 * Implements the MSWS32 generator, generating a 32-bit output, it follows the exact implementation as the source, only changing the way the variables are passed/used by the function.
 * 
 * @param msws32_variables Pointer to the msws32_var_t structure containing the variables for the MSWS32 generator.
 * @return uint32_t The 32-bit output generated by the MSWS32 generator.
 */
inline __attribute__((always_inline)) uint32_t IRAM_ATTR msws32(msws32_var_t *msws32_variables);

/**
 * @brief Initializes the Duffing map generator.
 * Initializes the Duffing map generator by performing a number of iterations, used to ensure that the transient less-chaotic component of the map is 'discarded', despite the high sensitivity to the initial conditions of the map performing some iterations will increase the chaoticity of the generated keys.
 * 
 * @param duffing_map_variables Pointer to the duffing_var_t structure containing the variables for the Duffing map.
 * @param iterations The number of iterations to perform.
 */
void initialize_generator(duffing_var_t* duffing_map_variables, const int iterations);

/**
 * @brief Set up the key generator.
 * Initializes both Duffing maps and the MSWS32 input variables, used in the setup of the program. Gets the key generator in a ready-to-use state.
 * 
 * @param duffing_map_1 Pointer to the first duffing_var_t structure for the Duffing map.
 * @param iterations1 The number of iterations for the first Duffing map.
 * @param duffing_map_2 Pointer to the second duffing_var_t structure for the Duffing map.
 * @param iterations2 The number of iterations for the second Duffing map.
 * @param msws32_input Pointer to the msws32_var_t structure for the MSWS32 generator.
 */
void key_generator_setup(duffing_var_t *duffing_map_1, const int iterations1, 
                        duffing_var_t* duffing_map_2, const int iterations2,
                        msws32_var_t* msws32_input);

/**
 * @brief Generates a new key using the Duffing map and MSWS32 generator.
 * Generates a new 32-bit key by performing one iteration of the Duffing map and the MSWS32 generator.
 * 
 * @param duffing_map_variables Pointer to the duffing_var_t structure containing the variables for the Duffing map.
 * @param msws32_variables Pointer to the msws32_var_t structure containing the variables for the MSWS32 generator.
 * @return uint32_t The new key generated by the Duffing map and MSWS32 generator.
 */
uint32_t key_generator(duffing_var_t* duffing_map_variables, msws32_var_t* msws32_variables);



/**
 * @brief Implements the Duffing map equation.
 * Implements the Duffing map, following the literature defined equation, performing one iteration per call.
 * 
 * @param duffing_map_variables Pointer to the duffing_var_t structure containing the variables for the Duffing map.
 */
inline void duffing_map(duffing_var_t* duffing_map_variables){
    const double temp_x = duffing_map_variables->y;
    duffing_map_variables->y = - DUFFING_BETA * (duffing_map_variables->x) + DUFFING_ALPHA  * temp_x - (temp_x * temp_x * temp_x);
    duffing_map_variables->x = temp_x;
}



/**
 * @brief Implements the MSWS32 generator.
 * Implements the MSWS32 generator, generating a 32-bit output, it follows the exact implementation as the source, only changing the way the variables are passed/used by the function.
 * 
 * @param msws32_variables Pointer to the msws32_var_t structure containing the variables for the MSWS32 generator.
 * @return uint32_t The 32-bit output generated by the MSWS32 generator.
 */
inline uint32_t msws32(msws32_var_t *msws32_variables) {
    msws32_variables->x *= msws32_variables->x; msws32_variables->x += (msws32_variables->w += msws32_variables->s); 
    return msws32_variables->x = (msws32_variables->x>>32) | (msws32_variables->x<<32);
}

/**
 * @brief Copies the bitwise representation of a double into a uint64_t.
 * 
 * @param result The uint64_t to output.
 * @param d The double value to copy.
 * 
 */
inline void doubleToUint64Bits(uint64_t* result, double d) {
    memcpy(result, &d, sizeof(double)); // Copy the bits from double to uint64_t
}

#endif // DUFFING_MSWS32_H